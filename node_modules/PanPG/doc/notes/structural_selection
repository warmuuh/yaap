Date: 20090714
Status: notes

2010-09-10: these were notes on an early TAL design, no longer relevant.

With *, it is no longer true that () and B are equivalent.
If both are introduced, then the language has more than one way to express the same structure which I would prefer to avoid.

The open paren introduces a mark to which the closing paren returns.

Part of the utility of * is in matching e.g. multiple children, (DB)*.

Parens may require you to backtrack while writing which I would also prefer to avoid.
B seems more conducive to live editing.

If B and * are extended appropriately then parens can be dropped.

Structural negation also uses parens.

One possibility:

Parens for grouping.
A group is treated as an atomic unit.
B after a group goes back over the group.
* after a group is what you'd expect.
! before a group is what you'd expect.

As an aid to live coding, a closing paren can be entered without the matching paren.
When this is done, the matching open paren will be inserted at the latest possible position at which parens would be necessary.
As any additional closing paren is entered, the inserted open paren will move backwards.
(How this interacts with already-entered open parens probably needs thought.)

B after * backtracks over all matches.

B cannot be followed by anything but U or D, primitive selectors must be used when a node is first encountered, and B cannot introduce new nodes (due to the B-after-* rule above).

In places where, e.g. U*B might be attempted, to access the ancestor at level 1, the correct solution is structural negation, as U*U!U.

There is the question of whether * should be greedy.

Assume X*Y where there are at least 2 distinct matches of Y after nâ‰¥0 X.
If * is greedy with backtracking, the furthest will be found.
If * is greedy without backtracking, it may be that none is found.
If * is non-greedy, the closest will be found.

DB*, U*, and D* are different in that DB* will never change the current node.

The question of greediness of * is still relevant to DB* however as it might bind nodes that are needed by the rest of selector.

With greedy * and negation, non-greedy * can be simulated.
If X*Y is a non-greedy match of X* followed by Y, we can simulate this using greedy * by constructing X' as the set complement of X minus Y, i.e. a selector which will match anything that would match X but not Y.
Then X'*Y where * is greedy would be equivalent, since with a non-greedy *, any match for Y would never match X in X*Y anyway.

So to match the ancestor at depth-1 of the current node, with a greedy *, we can write (U!(U!U))*.
In English: take as many parent nodes as possible such that for each it is not the case that the parent node does not have a parent node.
This doesn't quite work, since the root will also match (since U will fail, U!U will fail, and !(U!U) will succeed).
Oh, its (UUB)*.
But this consumes the root, so we really do need some kind of forward lookahead.
Ah, it is (U!!UB)*, or with added parens for clarity, (U(!!U)B)*.
Actually it is (U!!U)*, or "take as many as possible of parent nodes such that each does not not have a parent."

(Is ! right-associative or what?)

Notes for editor UI:
UBD!*() is the input alphabet.
When the entered symbol would be a syntactic error, we remap it to an editing operation that makes some kind of sense.
E.g. when a close paren is entered alone, we insert an earlier open paren.

We begin with a total grammar on this alphabet, and carve chunks out of it which have meaning in the language, and attempt to assign the rest to editing operations.

In other words, the language accepted by an editor should be /[UBD!*()]*/, but the language displayed is a subset of this.