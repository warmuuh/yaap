Problem:

Given:
- G, a parser expression grammar
- S, an initial string
- T, a parse tree generated by parsing S according to G
- E, a patch or edit which may be applied to S to generate a new string.

(a) Generate a parse tree transformation X such that applying X to T will produce a new tree T' equivalent to the tree that would be generated by applying E to S to generate S', and then parsing S' according to G.

(b) Given G alone, generate a JavaScript program which will take S, T, and E as arguments and return X to satisfy (a).

Definitions:

A parser expression grammar or PEG is a description of a particular grammar in the PEG formalism.
A PEG is provided to the function as an AST.

The string S may or may not conform to the grammar.

The parse tree T will either contain a successful parse, if S conforms to G, or will contain a partial parse and one or more error annotations describing the segments of the input on which the parser failed.
We may relax the equivalence requirement in cases where an error is introduced by an edit to the string.
In particular, it may be desired to localize the error more closely to the edit than what might result from a fresh parse of the entire erroneous string.
However, if the new string would parse successfully, creating an equivalent successful parse tree is always required.

The parse tree is given as a tree of parse nodes, each of which contains a rule name corresponding to a rule in G, a start position, given as an offset from the start position of the parent node in the parse tree, and a length giving the number of input characters matched.

The edit or patch is provided as a sequence of insertions and deletions.
Each deletion contains an offset and a length, and each insertion contains an offset and a string.