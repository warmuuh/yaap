Date: 2010-01-25

As explored in incremental_parsing_2, we developed a parser which accepts streaming input.
Whenever the end of the input is reached by the parser, it sends a signal to the input stream to request the next chunk of data.
The caller provides this stream of input chunks, followed by a final EOF event signaling the end of the entire input.

The hand-implemented streaming arithmetic parser is actually only half-streaming, because while the input is streamed, the entire parse tree is constructed as usual and only returned in one chunk at the end.

To have a fully streaming parser we need to modify the arithmetic parser so that it emits partial results at points in the parsing process where it is safe to do so.
Since the event stream can contain only events for entering and leaving a rule, not failing a rule that has already been entered (unless the entire parse fails) we need to only emit these events at points in the grammar where we can be sure that we will not backtrack.

We assume that this set of points is provided to the code generator by the user or by some analyzer which determines them from the grammar.

The parser descends into the parse tree as it consumes input until it reaches a point at which it chooses to emit a part of the parse tree.
At this point it needs to emit an array which opens all nodes on the parser's stack that have not already been opened, followed by any complete nodes that have been fully parsed up to this point.

Example:

input: "1 * 3 + 4 * 7"
input seen so far: "1 * 3 + 4 "
remaining input not yet seen by the parser: "* 7"

The grammar is that given previously (ignoring whitespace):

Expr ← Add
Add ← Mult ( "+" Mult )*
Mult ← Num ( "*" Num )*
...

The full parse tree (again ignoring whitespace) will be:

Expr "1 * 3 + 4 * 7"
  Add "1 * 3 + 4 * 7"
    Mult "1 * 3"
      Num "1"
      anon "*"
      Num "2"
    anon "+"
    Mult "4 * 7"
      Num "4"
                   ** current position **
      anon "*"
      Num "7"

Everything but the last two nodes that will be emitted has already been seen by the parser.
We must open the Expr, emit the entire first Add node with its children, the anonymous node which follows it, and then open the Mult node which follows that.
We have already seen the whitespace after the "4", so we can emit the finished Num node.
If the caller were maintaining a stack of open nodes, it would contain the Expr, Add, and Mult nodes.

Now assuming the next chunk is received with the final "* 7", and an EOF notification, then the parser must emit the last two complete nodes for "*" and "7", and must then close the Expr, Add, and Mult nodes.

Representing nodes in the streaming parser:
When an expression is entered, the parser pushes a frame onto its stack.
When an expression succeeds or fails, the parser goes into 'has result' mode, in which the result of an expression is propagated to the parent expression, which itself may then succeed, fail, or try another child expression.
When a child expression (other than the subexpression of a lookahead) succeeds, it adds all its child node to the parent child array.
When the succeeding expression is a rule or an anonymous node, it also adds a node for itself to the parent child array.

Previously we emitted the length of a node at the beginning, which doesn't work well when streaming, since a streamed open node has unknown length.
We now send the entire node length when the node is closed:
input: "2+2*3"
output: 0,1,2,3, -2,1, -2,1, -1,1, 2, 3, -2,1, -1,1, 3, -2,1, -2,3, -2,5, -2,5
actual output after making the change:
        0,1,2,3, -2,1, -2,1, -1,1, 2, 3, -2,1, -1,1, 3, -2,1, -2,3, -2,5, -2,5

In which 0, 1, 2, 3, etc open a node, and -2,n closes a node with length n, and -1,n is a complete anonymous node of length n.

2010-01-27

This is hard, the code is buggy and I think I was away from it too long; I don't understand how it works anymore and I'm making mistakes as I edit it.
Considering rewriting the arithmetic parser again by hand, trying to simplify as much as possible, and design streaming in from the start.

2010-02-15

The parser was rewritten (as streaming_revisited.js) and new codegen written which produces parsers like it.