2010-02-15
----------

In the streaming parser we assign certain flags to each expression, which determines whether the parser stores the current position, starts buffering child nodes, etc, when it enters that expression and when the expression matches or fails.

Here is a snippet of diagnostic output from the generator:

{Expr:{S:1
      ,name:"Expr"
      ,expr:{id:"Expr+0"
            ,S:1
            ,T:28672
            ,M:41
            ,F:42
            ,type:2
            ,toplevel:true
            ,flag_n:172
            ,flags:{cache:false
                   ,t_bufferout:false
                   ,pushpos:true
                   ,t_emitstate:true
                   ,m_emitstate:false
                   ,m_emitclose:true
                   ,m_emitanon:false
                   ,m_emitlength:true
                   ,m_resetpos:false
                   ,m_emitbuf:false
                   ,m_tossbuf:false
                   ,f_tossbuf:false}
            ,S_flags:4268
            ,S_flags_:"1000010101100"
            ,subexprs:[{id:"Expr+1"
                       ,S:7
                       ,T:8364

The flags and their meanings:

cache            should the parse result be cached?
t_bufferout      should child nodes of this node be buffered, or committed to the output stream immediately?
pushpos          does the start position need to be pushed onto the stack?
t_emitstate      should the start state be emitted as part of the output stream before the parse result is known?
m_emitstate      should the start state be emitted when the expression matches?
m_emitclose      should a close event be emitted when the expression matches?
m_emitanon       should an anonymous node be emitted on match?
m_emitlength     should the length of the matched node be emitted?
m_resetpos       should the position be reset to the pushed position on match (e.g. a lookahead)?
m_emitbuf        should the input stream that is currently being buffered be committed (possibly to be buffered by some containing expression) on match?
m_tossbuf        should the buffered input stream be thrown out on match (i.e. for lookaheads)?
f_tossbuf        should the buffered input stream be thrown out on failure?

The t_ m_ and f_ prefixes identify flags that apply to the test, match, or fail phases of parsing the expression.

A "top-level expression" means the entire right-hand side of a parse rule.
For example when the rule "S ← A (B / C) D" is parsed, the top-level expression is a sequence with three children.
It is the top-level expression of a rule which is responsible for emitting the node in the output stream when the rule matches.

How the flags are set:

cache            true for Rule top-level exprs
t_bufferout      true for proper sequences[1], top-level rule expressions, and lookaheads [2]
pushpos          top-level exprs, lookaheads, emits_anon exprs, and proper sequences[3]
t_emitstate      set on every top-level rule[4] except those which are elided
m_emitstate      always false [7]
m_emitclose      equal to t_emitstate [8]
m_emitanon       by definition, any expr that always produces an anonymous node, see below
m_emitlength     union of m_emitclose and m_emitanon
m_resetpos       positive lookaheads only
m_emitbuf        proper sequences and top-level exprs [9]
m_tossbuf        positive lookaheads only [11]
f_tossbuf        proper sequences, lookaheads, and top-level exprs

[1] a proper sequence is a sequence with two or more sub-expressions
[2] t_bufferout can always be turned off if the expression can't generate child nodes (bufferout should be called buffer_child_nodes since that is actually what it does)
[3] pushpos also implies that the position is popped on match or failure
[4] however since t_bufferout is also set, the rule will only be pushed to the output stream when it matches
[7] this could be set on rules which are streamable (i.e. don't buffer input) but can also fail without failing the entire parse; it is only suitable for rules which cannot have children, as otherwise the start will be emitted after the child nodes
[9] this is everything that sets t_bufferout, except for lookaheads, in which the buffered output if any should be dropped rather than emitted
[11] when a negative lookahead succeeds, the subexpr failed, which means it emitted no children and (by contract) did not advance the position, therefore only the positive lookaheads require resetting the position on the match state

Anonymous nodes are sometimes required because the output format requires sibling nodes to completely tile their parent.
Some expressions can emit anonymous nodes every time they match, but in some cases it is desirable for anonymous nodes to be combined, or not to appear in the output stream except when actually followed by a named node.

Anonymous nodes can be emitted when they are needed as follows:

on parent expr having both anon_consume and can_emit_named: on test, push pos twice
on child expr emitting named on test: peek at position on stack, subtract from current position, if non-zero, emit (to buffer) an anon node
on child expr match: emit node as normal, then pop top stack position, and push current position.
on parent expr fail: drop buffered output, drop top position on stack, reset to next position from stack
on parent expr match: pop top two positions from stack, compare with current position and each other.  If top two differ, a node was emitted, if additionally top position differed from current position then emit an anonymous node to fill the gap, in all other cases do not emit any anonymous node.

The above only works if there is never an intermediate subexpression that uses the position stack, which is not the case.

We could add a separate emit stack, and not add any new flags.
Never set m_emitanon, this makes t_emitstate, m_emitclose, and m_emitlength all equal.
When a node that has t_emitstate (which is all top-level exprs) is tested, before emitting the start tag, compare the input position and emit position.
If there is a difference then also emit an anonymous node.
Then push the current position onto the emit stack.
This means that, in an expression which emits a node, the position at the top of the emit stack is initially the position at the start of the node.
When a t_emitstate expr succeeds, if the top if the emit stack is not equal to the top of the position stack, then a child node must have been emitted.
If the emit stack top is also not equal to the current position then emit an anonymous node to cover the end of the current node.


[ 20100810: TODO: we can eliminate most drop rules from having t_bufferout set by determining that none of their descendants have non_drop_ctx, which will frequently be the case.  As it is we cannot do this (although if there is a DFA we can). ]

push the position onto the emit stack.
When 

To determine which expressions are "anonymous expressions" (i.e. can generate an anonymous node) first we consider atomic expressions.
Once string literals are replaced with sequences of csets, there are only three kinds of atomic expressions: named references, csets, and ϵ.
Of these, named references can consume input, but always emit nodes, so the input that they consume is accounted for in the output stream.
The empty expression ϵ cannot consume input, and so never contributes an output node, and can be ignored here.
Character primitives, however, can consume input, but do not generate output nodes, so in some cases, anonymous nodes need to be generated in the output.
We can classify expressions as either 'consuming anonymously' or not.
Any character literal consumes anonymously.
Named references do not consume anonymously.
An ordered choice consumes anonymously (potentially) if any subexpression consumes anonymously.
A sequence consumes anonymously if it has at least one sub-expression which consumes anonymously, but does not have any named references.
If a sequence contains a named reference, and has a sub-expression which consumes anonymously, then that sub-expression is marked as anonymous-emitting, and the sequence itself does not consume anonymously.

In the case of mixed ordered choice, we can make all anonymously-consuming sub-expressions emit anonymous nodes.
The named references will not emit anonymous nodes.
The entire mixed ordered choice then becomes a non-anonymously-consuming and a can-emit-named-node expression.

So there are atomic expressions for which the choice is simple.
There are repetitions, which are anonymously consuming if the sub-expression is anonymously consuming, and otherwise not.
There are lookaheads, which never consume any input or emit any nodes.
Finally there are sequences and ordered choices which are the interesting cases.

Lookaheads and ϵ never emit nodes and never consume input, we will call these 'non-emitting, non-consuming'.
Character classes always consume and never emit named nodes, we call these 'anonymously consuming'.
Named references always emit nodes, we call these 'always emitting'.
Ordered choice productions can contain expressions which can emit named references but might emit nothing.
We call these last two together the 'can-emit-named' expressions, including any which always emit named nodes and those which sometimes do.
When a node would otherwise consume anonymously, but can have a named sibling, we cause it to emit an anonymous node.
Exactly one of these four classes (no-consume, anon-consume, can-emit-named, and anon-emit) should apply to any expression in any grammar.
This means that no can-emit-named expression can be permitted to consume anonymously.
This is the reason why this rule may introduce additional anonymous nodes that are strictly unnecessary.

The problem in the output is if there is a named node child node N1 which has no named node sibling, but is shorter than the parent node N2, then the output format becomes insufficient to determine the begin and end position of N1 within N2.
To prevent this problem we insert anonymous nodes into the output stream.

Example:

NegativeInteger ← "-" Digits

When parsing "-123" the desired parse tree is:

NegativeInteger 0-4
  anonymous 0-1
  Digits 1-4

If some extraneous anonymous nodes are produced in the output, that is an acceptable error.
The current bug is much worse and results in an incorrect tree.

The rules:

CharLit → anon-consume
ϵ → no-consume
Named → can-emit-named
Lookahead → no-consume
Repetition,
Sequence,
OrdC        → see below

A repetition is either can-emit-named, or anon-consume, according to the type of its subexpression.

A sequence of only can-emit-named, and no-consume is can-emit-named.
A sequence of only anon-consume and no-consume is anon-consume.
Otherwise the sequence is mixed.
Without intervention such a sequence would be able to emit either named nodes or consume anonymously, which we do not allow.
Therefore in such a case we set each anon-consume subexpr to anon-emit.
This becomes a sequence of anon-emit and can-emit-named, which becomes itself a can-emit-named expression.
Because of this rule, no can-emit-named expression will ever consume anonymously.

Observations:
A no-consume sub-expression has no effect on the type of the parent and can be ignored.
There will never be an anon-emit expression unless created by this algorithm (they do not arise from the properties of atomic elements but from the ways in which they are combined) so there will never be a sequence which contains an anon-emit without a can-emit-named.

An ordered choice of only can-emit-named or no-consume becomes can-emit-named.
An ordered choice of only anon-consume or no-consume becomes anon-consume.
(This means that an expression marked 'anon-consume' can also succeed without consuming, which is why before emitting an anonymous node we test for non-zero length.)
Otherwise the ordered choice is mixed.
Without intervention, a mixed ordered choice could consume anonymously or it could emit a named node.
This would be fine in some circumstances, however, it breaks the desired constraint that we can determine, at compile time, which of the four categories each expression is in.
If we desired to maintain this information at runtime, by keeping track of which sub-expression succeeded, we could eliminate some unnecessary anonymous nodes, however, we prefer the solution which makes the runtime behavior per expression deterministic, regardless of how that expression came to succeed.
We handle a mixed ordered choice similarly to a mixed sequence.
Each sub-expression which is marked anon-consume, is changed to anon-emit.
The entire OrdC then becomes can-emit-named, and the constraint that every can-emit-named expression 'looks after' what it consumes (i.e. generates nodes that fully cover the input it matches) is preserved.

We would also like to be sure that no anonymous node can ever be emitted as a child of another anonymous node.
To verify this, we consider that only anon-emit expressions ever emit anonymous nodes, and anon-emit nodes are only created as children of an OrdC or a sequence which also has a can-emit-named sub-expression.
Any OrdC or sequence which has at least one can-emit-named sub-expression, will become a can-emit-named expression itself.
Therefore the parent of every anon-emit expression will be a can-emit-named expression, and since that can-emit-named expression can never emit an anonymous node, we can be satisfied.

The current implementation:

anon-consume
no-consume (does not affect parent and does not need to appear in code)
can-emit-named
anon-emit

function v6_calculate_flags_expr(rule){return function loop(parent){return function(expr,i){var ret={},subs_anon_consume=[],sub_can_emit_named=false
   function makeAnonEmit(sub){
    sub.emits_anon=true
    sub.flags.pushpos=true
    sub.flags.m_emitanon=true
    sub.flags.m_emitlength=true}
   if(isCset(expr.type)){
    expr.anon_consume=true}
   if(isNamedRef(expr.type)){
    expr.can_emit_named=true}
   ret.cache=!!expr.toplevel
   expr.subexprs.forEach(loop(expr))
   expr.subexprs.forEach(function(sub){
    if(sub.anon_consume) subs_anon_consume.push(sub)
    if(sub.can_emit_named) sub_can_emit_named=true})
   if(isLookahead(expr.type)){
    expr.consumes_anon=false
    expr.can_emit_named=false}
   if(isOrdC(expr.type)){
    expr.anon_consume = !!subs_anon_consume.length
    expr.can_emit_named = sub_can_emit_named
    if(expr.anon_consume && expr.can_emit_named){
     subs_anon_consume.forEach(makeAnonEmit)
     expr.anon_consume=false}}
   if(isSequence(expr.type)){
    expr.anon_consume = !!subs_anon_consume.length
    expr.can_emit_named = sub_can_emit_named
    if(expr.anon_consume && expr.can_emit_named){
     subs_anon_consume.forEach(makeAnonEmit)
     expr.anon_consume=false}}
   ret.t_bufferout=!!(  isLookahead(expr.type)
                     || expr.toplevel
                     || isProperSequence(expr)
                     )
   ret.pushpos=!!(  expr.toplevel
                 || isLookahead(expr.type)
                 || expr.emits_anon
                 || isProperSequence(expr) )
   ret.t_emitstate=!!expr.toplevel
   ret.m_emitstate=false // used only in streaming
   ret.m_emitclose=!!expr.toplevel
   ret.m_emitanon=false // will only be set by parent expression
   ret.m_emitlength=ret.m_emitclose
   ret.m_resetpos=isPositiveLookahead(expr.type)
   ret.m_emitbuf=!!(  isProperSequence(expr)
                   || expr.toplevel )
   ret.m_tossbuf=isLookahead(expr.type)
   ret.f_tossbuf=!!(//isProperSequence(parent)
                   isProperSequence(expr)
                   || isLookahead(expr.type)
                   || expr.toplevel
                   )
   expr.flags=ret}}}


So the two ways of assigning t_bufferout and m_emitbuf and f_tossbuf were not compatible.
...actually that's not quite obvious to me.

So the issue is what happens with rules that do not contain a proper sequence at top level, but which have t_emitstate set (as all rules currently do).
Example:
S ← " "+
This becomes:
S ← (seq U+0020 (rep U+0020))
The full derived rule given by the current codegen:
S ← (S+0 seq (S+1 seq (S+2 cset 20) (S+3 rep (S+4 cset 20))))
There is an extra sequence at the top, which is a quirk of the simplification rules.
We can do away with this.

So the issue is:
When a rule is entered, the t_emitstate prevents the rule from coming after any children.
If the rule is a proper sequence, we t_bufferout (this should just be called t_pushbuf).
In this case, if the rule fails, the t_emitstate will get thrown away with the buf, by f_tossbuf on the sequence sub-expr which fails.
But, if the top-level expr is not a proper sequence (as in S here), then when it is entered, the state gets pushed onto the existing buf, and then, even if the rule fails, there is no f_tossbuf, nor can there be since there was no corresponding t_pushbuf (nee t_bufferout).

One solution is to have the pushbuf on the rule and on every proper sequence.
This is the current solution, but it is not implemented correctly.
Sequences need to have t_bufferout and m_emitbuf and f_tossbuf set.
What if the subexpressions don't have any of these set and only proper sequences do the buffering?
And top-level rules.
This is inefficient (lots of needless buffering) but it should be correct.
It does completely kill streaming however, but streaming needs to be added in with another analysis phase anyway.
So, let's try to make this work, inefficient or not.

When both cache and buffering flags are set on the same expression (as for top-level expressions) the order of operations matters.
When entering an expression, the result may be pulled from the cache.
If it is, it needs to have the same effect on the buffer state as if it had been actually played out rather than pulled from cache.
When the result is known, the same buffer operations will be performed, whether the result came from the cache or not.

We should admit the possibility of any combination of cache and buffering flags being set: either, neither, or both, without creating an erroneous parser.
If there is no buffering, but there is a cache:
when the ...
ok, no.
caching implies buffering, because the thing stored in the cache includes the buffer of child contents if any, and we currently only have one kind of caching (cache-all, as oppsed to cache-pos which works only when a node cannot have children).
only if we ever cache "bachelor" nodes then this case might become relevant
so if there is buffering but no cache, everything currently works
if there is buffering and a cache:
- when the expr is entered, t_bufferout implies that we always push a buffer, whether it is coming from the cache or not
... so we just need to set t_bufferout itself whenever cache is set, which I already had written in the first set of rules above, and subsequently changed my mind about somehow by the secend set...
... no, that's also wrong.  The flags generated by the code, and the second set of rules, are correct, the problem is in the order