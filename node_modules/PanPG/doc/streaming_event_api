Date: 2010-03-30
Status: notes

The most direct API for dealing with the event stream produced by the v6 parsers is one that simply calls a handler for each event.

The caller provides a dictionary of callback functions, and as the parser proceeds, it calls the functions that are defined each time a node is opened or closed, or when an anonymous node is emitted.

This is trivial to implement, has effectively no overhead, and the approach is familiar to users of similar event-based streaming parser APIs such as SAX.

It leaves tree construction up to the user, and does not provide the rich selection facilities of TAL, but in simple cases this is adequate.

It is also nearly equivalent to the embedded code facilities of many other parser generators, and can easily be combined with the parser generator itself if desired, creating a parser with embedded code.

API:

// f_XXX :: (Dict, Names) → event stream → _

The dictionary has Rule_open(), Rule_close() (where "Rule" is the name of some rule in the grammar), anonymous(), and fail() methods, all of which are optional.

The argument to a Rule_open() call is the start position (the rule name is implied by the callback which is being called).
The arguments to a Rule_close() call are the start and end positions.
The arguments to an anonymous() call are the start and end positions.

Any desired tree building, etc, can be done by the caller.

With this we can probably remove the TAL dependency in the current codegen and this should speed it up considerably.

This is implemented, but using it is a bit inconvenient:

function test_streamHandler(){var dict,out=[],node,stack=[],parent,string,result,names
 string="1+2*3"
 out.push(string+'\n\n')
 result=p_arith_streaming_v6_default_flags_Expr(string)
 names=p_arith_streaming_v6_default_flags_Expr.names
 if(!result[0])return showResult(result)
 dict=
  {Expr_close:function(){out.push(node.cn[0])}
  ,Expr_open:function(){node={cn:[]}}
  ,Add_open:function(){stack.push(node);node={cn:[]}}
  ,Add_close:function(){
    parent=stack.pop()
    parent.cn.push(sum(node.cn))
    node=parent}
  ,Mult_open:function(){stack.push(node);node={cn:[]}}
  ,Mult_close:function(){
    parent=stack.pop()
    parent.cn.push(product(node.cn))
    node=parent}
  ,Num_close:function(start,end){
    node.cn.push(parseInt(string.slice(start,end),10))}
  }
 streamHandler(dict,names)(result[1])
 return out.join('')}

Second design:

function test_streamHandler(){var dict,out=[],string,result,names
 string="1+2*3"
 out.push(string+'\n\n')
 result=p_arith_streaming_v6_default_flags_Expr(string)
 names=p_arith_streaming_v6_default_flags_Expr.names
 if(!result[0])return showResult(result)
 dict=
  {Expr:function(s,e,cn){out.push(cn[0])}
  ,Add:function(s,e,cn){return sum(cn)}
  ,Mult:function(s,e,cn){return product(cn)}
  ,Num:function(s,e,cn,m){return parseInt(m,10)}
  }
 streamHandler(dict,names)(result[1])
 return out.join('')}

...no need to maintain a stack, no need to keep track of the parent node (since the return value is automatically passed back up), and no need to collect child node values manually.

The implementation can examine the .length of each callback, only calculating the arguments that are required (e.g. not slicing strings for each node, and not creating a lot of child arrays that are not going to be populated).

This is a postorder traversal, which should work well for most bottom-up analyses, such as the example here of calculating arithmetic expressions.
There is no access to the parent node, since it probably doesn't exist yet when the child nodes are being handled.
We could provide access to the parent rule stack, however.

We also add a catch-all 'any' rule type, which if present, will be called on every node.

The arguments are:

m: a match object with .start and .end properties and a .text() method.
cn: the collected return values of the callbacks for the direct children of the current node, in order.

For anonymous nodes the only argument is `m`.

For the `fail` callbacks, the arguments are the position in the input and the parse failure message if any.

This is now done.
There is no fail callback, because the API takes a success result only... but I think that's a mistake.
It should take the same type the parser returns.