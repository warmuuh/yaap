[RuleSet] D[Rule]B*
 code_v5 ≔ function(opts){return codegen_v5(opts,Ds.nm,Ds.named_re)}

[Rule] D[NonTerminal] BD[OrdChoice]
 nm ≔ D.match
 named_re ≔ [.nm,BD.re]

[AtomicExpr]D[NonTerminal]
 re ≔ re_reference(D.match)

[AtomicExpr]D[CharSet]
 re ≔ re_from_cset(D.cset)

[AtomicExpr]D[StrLit]
 re ≔ re_from_str(D.str)

[AtomicExpr]D[Empty]
 re ≔ re_from_str("")

[OrdChoice]D[Sequence]B*
 re ≔ re_union(Ds.re)

[Sequence]D[SeqUnit]B*
 re ≔ re_sequence(Ds.re)

[SeqUnit|Replicand|ParenthExpr] D
 re ≔ D.re

[MNRep]D[Replicand]BD[M]B!D[N]
 re ≔ re_rep(BD.n,BD.n,D.re)

[MNRep]D[Replicand]BD[M]BD[N]
 re ≔ re_rep(BD.n,BDBD.n,D.re)

[M|N]
 n ≔ parseInt(.match)

[Optional]D[Replicand]D
 re ≔ re_rep(0,1,D.re)

[AnyRep]D[Replicand]D
 re ≔ re_rep(0,0,D.re)

[PosRep]D[Replicand]D
 re ≔ re_rep(1,0,D.re)

[NegLookahead] D[OrdChoice]
 re ≔ re_neg_lookahead(D.re)

[PosLookahead] D[OrdChoice]
 re ≔ re_pos_lookahead(D.re)

[StrLit]
 str ≔ .match.slice(1,-1)

[PropSpec]
 cset ≔ CSET.fromUnicodeGeneralCategory(.match)

[CodePointRange]D[CodePointFrom]DBBD[CodePointTo]D
 cset ≔ CSET.fromIntRange(DD.cp,BDD.cp)

[CodePointExpr]D
 cset ≔ D.cset

[UnicodePropSpec]D[PositiveSpec]D[PropSpec]
 cset ≔ DD.cset

[UnicodePropSpec]D[NegativeSpec]D[PropSpec]
 cset ≔ CSET.complement(DD.cset)

[CodePoint]D
 cset ≔ CSET.fromInt(D.cp)
 cp ≔ D.cp

[UPlusCodePoint]
 cp ≔ parseInt(.match.slice(2),16)

[CodePointLit]
; XXX handle surrogate pairs
 cp ≔ .match.charCodeAt(0)

[CharSetUnion] D[CodePointExpr]B*
 cset ≔ foldl1(CSET.union, Ds.cset)

[CharSetIntersection] D[CharSetUnion]B*
 cset ≔ foldl1(CSET.intersection, Ds.cset)

[CharSetExpr] D[CharSetDifference] D[CharSetIntersection]B*
 cset ≔ foldl1(CSET.difference, Ds.cset)

[CharSet] D[PosCharSet] D[CharSetExpr]
 cset ≔ DD.cset

[CharSet] D[NegCharSet] D[CharSetExpr]
 cset ≔ CSET.complement(DD.cset)

[CharSet] D[PosCharSet] !D[CharSetExpr]
 cset ≔ CSET.nil

[CharSet] D[NegCharSet] !D[CharSetExpr]
 cset ≔ CSET.universe