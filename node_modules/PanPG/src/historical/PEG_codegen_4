[RuleSet] D[Rule]B*
 code_v4 ≔ function(prefix,start){return codegen_v4(prefix,start,Ds.f1,Ds.named_re)}

[Rule] D[NonTerminal] BD[OrdChoice]
 nm ≔ D.match
 f1 ≔ 'function '+.nm+'(s,p){var c=s.pre(\''+ .nm+'\',p);if(typeof c==\'boolean\')return c;return s.fin(c,p,_'+.nm+'(s,c))}'
 named_re ≔ [.nm,BD.re]

[AtomicExpr]D[NonTerminal]
 re ≔ re_reference(D.match)

[AtomicExpr]D[CharSet]D[PosCharSet]D[CharSetExpr]
 re ≔ re_from_cset(DDD.cset)

[AtomicExpr]D[CharSet]D[NegCharSet]D[CharSetExpr]
 re ≔ re_from_cset(CSET.complement(DDD.cset))

[AtomicExpr]D[StrLit]
 re ≔ re_from_str(D.str)

[AtomicExpr]D[Empty]
 re ≔ re_from_str("")

[OrdChoice]D[Sequence]B*
 re ≔ re_union(Ds.re)

[Sequence]D[SeqUnit]B*
 re ≔ re_sequence(Ds.re)

[SeqUnit|Replicand|ParenthExpr] D
 re ≔ D.re

[MNRep]D[Replicand]BD[M]B!D[N]
 re ≔ re_rep(BD.n,BD.n,D.re)

[MNRep]D[Replicand]BD[M]BD[N]
 re ≔ re_rep(BD.n,BDBD.n,D.re)

[M|N]
 n ≔ parseInt(.match)

[Optional]D[Replicand]D
 re ≔ re_rep(0,1,D.re)

[AnyRep]D[Replicand]D
 re ≔ re_rep(0,0,D.re)

[PosRep]D[Replicand]D
 re ≔ re_rep(1,0,D.re)

[NegLookahead] D[OrdChoice]
 re ≔ re_neg_lookahead(D.re)

[PosLookahead] D[OrdChoice]
 re ≔ re_pos_lookahead(D.re)

[StrLit]
 str ≔ .match.slice(1,-1)

[PropSpec]
 cset ≔ CSET.fromUnicodeGeneralCategory(.match)

[CodePointRange]D[CodePointFrom]DDBBBD[CodePointTo]DD
 cset ≔ CSET.fromCharRange(DDD.match,BDDD.match)

[CodePointExpr]D
 cset ≔ D.cset

[UnicodePropSpec]D[PositiveSpec]D[PropSpec]
 cset ≔ DD.cset

[UnicodePropSpec]D[NegativeSpec]D[PropSpec]
 cset ≔ CSET.complement(DD.cset)

[CodePoint]D
 cset ≔ CSET.fromInt(D.cp)
 cp ≔ D.cp

[UPlusCodePoint]
 cp ≔ parseInt( .match.slice(2),16)

[CodePointLit]
; XXX handle surrogate pairs
 cp ≔ .match.charCodeAt(0)

[CharSetUnion] D[CodePointExpr]B*
 cset ≔ foldl1(CSET.union, Ds.cset)

[CharSetIntersection] D[CharSetUnion]B*
 cset ≔ foldl1(CSET.intersection, Ds.cset)

[CharSetExpr] D[CharSetDifference] D[CharSetIntersection]B*
 cset ≔ foldl1(CSET.difference, Ds.cset)

[CharSet] D[PosCharSet] D[CharSetExpr]
 cset ≔ DD.cset

[CharSet] D[NegCharSet] D[CharSetExpr]
 cset ≔ CSET.complement(DD.cset)