{
  "name": "meld",
  "version": "1.2.0",
  "description": "AOP for JS with before, around, on, afterReturning, afterThrowing, after advice, and pointcut support",
  "keywords": [
    "aop",
    "aspect",
    "cujo"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "repositories": [
    {
      "type": "git",
      "url": "https://github.com/cujojs/meld"
    }
  ],
  "bugs": "https://github.com/cujojs/meld/issues",
  "maintainers": [
    {
      "name": "Brian Cavalier",
      "url": "http://hovercraftstudios.com"
    },
    {
      "name": "John Hann",
      "url": "http://unscriptable.com"
    }
  ],
  "devDependencies": {
    "buster": "~0.6"
  },
  "main": "meld",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "buster test -e node"
  },
  "readme": "[![Build Status](https://secure.travis-ci.org/cujojs/meld.png)](http://travis-ci.org/cujojs/meld)\n\n[Aspect Oriented Programming](http://en.wikipedia.org/wiki/Aspect-oriented_programming \"Aspect-oriented programming - Wikipedia, the free encyclopedia\") for Javascript.  It allows you to change the behavior of, or add behavior to methods and functions (including constructors) *non-invasively*.\n\nAs a simple example, instead of changing code, you can use meld to log the result of `myObject.doSomething`:\n\n```js\nvar myObject = {\n\tdoSomething: function(a, b) {\n\t\treturn a + b;\n\t}\n};\n\n// Call a function after myObject.doSomething returns\nvar remover = meld.after(myObject, 'doSomething', function(result) {\n\tconsole.log('myObject.doSomething returned: ' + result);\n});\n\nmyObject.doSomething(1, 2); // Logs: \"myObject.doSomething returned: 3\"\n\nremover.remove();\n\nmyObject.doSomething(1, 2); // Nothing logged\n```\n\n# Docs\n\n* [API](meld/blob/master/docs/api.md)\n* [Reference](meld/blob/master/docs/reference.md)\n* [Aspects](meld/blob/master/docs/aspects.md)\n\n# Quick Start\n\n### AMD\n\n1. Get it using one of the following\n\t1. `yeoman install meld`, or\n\t1. `bower install meld`, or\n\t1. `git clone https://github.com/cujojs/meld`, or\n\t1. `git submodule add https://github.com/cujojs/meld`\n\n1. Configure your loader with a package:\n\n\t```js\n\tpackages: [\n\t\t{ name: 'meld', location: 'path/to/meld', main: 'meld' },\n\t\t// ... other packages ...\n\t]\n\t```\n\n1. `define(['meld', ...], function(meld, ...) { ... });` or `require(['meld', ...], function(meld, ...) { ... });`\n\n### Node\n\n1. `npm install meld`\n1. `var meld = require('meld');`\n\n### RingoJS\n\n1. `ringo-admin install cujojs/meld`\n1. `var meld = require('meld');`\n\nRunning the Unit Tests\n======================\n\nInstall [buster.js](http://busterjs.org/)\n\n`npm install -g buster`\n\nRun unit tests in Node:\n\n`buster test`\n\n# Changelog\n\n### 1.2.0\n\n* `meld.joinpoint()` - [Access the current joinpoint](meld/blob/master/docs/api.md#meldjoinpoint) from any advice type.\n* [Bundled aspects](meld/blob/master/docs/aspects.md):\n\t* trace: trace method call entry/return/throw\n\t* memoize: simple memoization for methods and functions\n\t* cache: configurable caching aspect to do more than simple memoization\n\n### 1.1.0\n\n* Advice can be applied directly to methods on a function.\n* Removed undocumented behavior that implicitly adds constructor prototype advice: to advise a prototype, pass the prototype as the advice target.\n\n### 1.0.0\n\n* **Removed browser global** - `window.meld` is no longer supported. See [this post on the cujo.js Google Group](https://groups.google.com/d/topic/cujojs/K0VGuvpYQ34/discussion) for an explanation.\n* No functional change beyond browser global removal.\n\n### 0.8.0\n\n* 1.0.0 Release Candidate 1\n* Documentation! Check out the new [reference](meld/blob/master/docs/reference.md) and [api](meld/blob/master/docs/api.md) docs.\n* **Deprecated browser global** - meld.js will drop support for browser global for 1.0.0 and will support modular environments only.\n\n### 0.7.2\n\n* Fix for context when advising constructors: `this` is now the constructed instance in all advice functions.\n\n### 0.7.1\n\n* Fix for global name when using meld as a browser global. Thanks [@scothis](https://github.com/scothis)\n* Update unit tests to run in browser using `buster server`, in addition to node. Thanks again, [@scothis](https://github.com/scothis) :)\n\n### 0.7.0\n\n* Advice can be applied directly to functions without a context.\n* Advice can be applied to constructors.\n* `joinpoint.proceed()` can be called multiple times. This makes it possible to implement \"retry\" types of advice.\n\n### 0.6.0\n\n* aop.js is now meld.js\n* Use [Travis CI](http://travis-ci.org/cujojs/meld)\n\n### 0.5.4\n\n* Optimizations to run time advice invocation, especially around advice\n* Fix for passing new args to `joinpoint.proceed()` in around advice\n* Added `joinpoint.proceedApply(array)` for proceeding and supplying new arguments as an array\n* Ported unit tests to [BusterJS](http://busterjs.org)\n\n### 0.5.3\n\n* First official release as part of [cujojs](http://github.com/cujojs)\n* Minor doc and package.json tweaks\n\n### 0.5.2\n\n* Revert to larger, more builder-friendly module boilerplate.  No functional change.\n\n### 0.5.1\n\n* Minor corrections and updates to `package.json`\n\n### 0.5.0\n\n* Rewritten Advisor that allows entire aspects to be unwoven (removed) easily.\n\n# Beers to:\n\n* [AspectJ](http://www.eclipse.org/aspectj/) and [Spring Framework AOP](http://static.springsource.org/spring/docs/3.0.x/reference/meld.html) for inspiration and great docs\n* Implementation ideas from @phiggins42's [uber.js AOP](https://github.com/phiggins42/uber.js/blob/master/lib/meld.js)\n* API ideas from [jquery-aop](http://code.google.com/p/jquery-aop/)",
  "readmeFilename": "README.md",
  "_id": "meld@1.2.0",
  "dist": {
    "shasum": "1c69d89c3221529bb64c779c99a56ac7d2440fc3"
  },
  "_from": "meld"
}
